// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
document.addEventListener("DOMContentLoaded", () => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initializeNavigation()
    initializeAnimations()
    initializeCounters()
    initializeLucideIcons()

    console.log('üèõÔ∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ "–î–µ–ª–æ –ø—Ä–æ—Ç–∏–≤ –ö–ì–î" –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error)
  }
})

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function initializeNavigation() {
  try {
    const currentPage = window.location.pathname.split("/").pop() || "index.html"
    const navLinks = document.querySelectorAll(".nav-link")

    navLinks.forEach((link) => {
      const href = link.getAttribute("href")
      if (href === currentPage) {
        link.classList.add("active")
      } else {
        link.classList.remove("active")
      }
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", error)
  }
}

// –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
function initializeAnimations() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É IntersectionObserver
    if (!window.IntersectionObserver) {
      console.warn("IntersectionObserver –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
      return
    }

    const observerOptions = {
      threshold: 0.1,
      rootMargin: "0px 0px -50px 0px",
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("animate-fade-in-up")
        }
      })
    }, observerOptions)

    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∏ —Å–µ–∫—Ü–∏—è–º–∏
    const elementsToAnimate = document.querySelectorAll(".card, .metric-card, .timeline-item, .agency-card")
    elementsToAnimate.forEach((el) => {
      if (el) observer.observe(el)
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏:", error)
  }
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
function initializeCounters() {
  try {
    const counters = document.querySelectorAll(".metric-value")

    const animateCounter = (element) => {
      try {
        const target = element.textContent
        const isNumber = /^\d+/.test(target)

        if (!isNumber) return

        const finalNumber = Number.parseInt(target.match(/\d+/)[0])
        const duration = 2000
        const increment = finalNumber / (duration / 16)
        let current = 0

        const timer = setInterval(() => {
          current += increment
          if (current >= finalNumber) {
            current = finalNumber
            clearInterval(timer)
          }

          element.textContent = target.replace(/\d+/, Math.floor(current))
        }, 16)
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞:", error)
      }
    }

    if (window.IntersectionObserver) {
      const counterObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              animateCounter(entry.target)
              counterObserver.unobserve(entry.target)
            }
          })
        },
        { threshold: 0.5 },
      )

      counters.forEach((counter) => {
        if (counter) counterObserver.observe(counter)
      })
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤:", error)
  }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
const DocumentUtils = {
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  formatFileSize: (bytes) => {
    try {
      if (bytes === 0) return "0 Bytes"
      const k = 1024
      const sizes = ["Bytes", "KB", "MB", "GB"]
      const i = Math.floor(Math.log(bytes) / Math.log(k))
      return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞:", error)
      return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }
  },

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  formatDate: (dateString) => {
    try {
      const options = {
        year: "numeric",
        month: "long",
        day: "numeric",
      }
      return new Date(dateString).toLocaleDateString("ru-RU", options)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:", error)
      return dateString
    }
  },

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
  downloadDocument: (filename) => {
    try {
      console.log(`üìÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${filename}`)
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      alert(`–î–æ–∫—É–º–µ–Ω—Ç "${filename}" –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error)
    }
  },
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —É—Ç–∏–ª–∏—Ç—ã
const StatsUtils = {
  // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  calculateAverageProcessingTime: (data) => {
    try {
      if (!Array.isArray(data) || data.length === 0) return 0
      const total = data.reduce((sum, item) => sum + (item.processingTime || 0), 0)
      return (total / data.length).toFixed(1)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:", error)
      return 0
    }
  },

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  generateColor: (index) => {
    try {
      const colors = [
        "#ef4444", // red
        "#f59e0b", // amber
        "#3b82f6", // blue
        "#10b981", // green
        "#8b5cf6", // purple
        "#f97316", // orange
      ]
      return colors[index % colors.length]
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞:", error)
      return "#666666"
    }
  },
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener("error", (e) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ MetaMask –∏ –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
  if (
    e.error &&
    e.error.message &&
    (e.error.message.includes("MetaMask") || e.error.message.includes("ethereum") || e.error.message.includes("web3"))
  ) {
    console.warn("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞:", e.error.message)
    return
  }
  console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:", e.error)
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
window.addEventListener("unhandledrejection", (e) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ MetaMask –∏ –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
  if (
    e.reason &&
    e.reason.message &&
    (e.reason.message.includes("MetaMask") ||
      e.reason.message.includes("ethereum") ||
      e.reason.message.includes("web3"))
  ) {
    console.warn("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞:", e.reason.message)
    e.preventDefault() // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
    return
  }
  console.error("‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–º–∏—Å–∞:", e.reason)
})

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Lucide –∏–∫–æ–Ω–æ–∫
function initializeLucideIcons() {
  try {
    const lucide = window.lucide // Declare the lucide variable
    if (lucide && lucide.createIcons) {
      lucide.createIcons()
    } else {
      console.warn("Lucide –∏–∫–æ–Ω–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫:", error)
  }
}
